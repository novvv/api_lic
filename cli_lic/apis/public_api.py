# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PublicApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def file_download_download_token_get(self, **kwargs):
        """
        Downloads file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_download_download_token_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_download_download_token_get_with_http_info(**kwargs)
        else:
            (data) = self.file_download_download_token_get_with_http_info(**kwargs)
            return data

    def file_download_download_token_get_with_http_info(self, **kwargs):
        """
        Downloads file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_download_download_token_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_download_download_token_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/octet-stream'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file/download/{download_token}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_download_link_belongs_to_uuid_uuid_get(self, belongs_to_uuid, uuid, **kwargs):
        """
        Gets file download link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_download_link_belongs_to_uuid_uuid_get(belongs_to_uuid, uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str belongs_to_uuid: UUID of entity file belongs to (required)
        :param str uuid: File UUID (required)
        :return: FileDownloadLinkResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_download_link_belongs_to_uuid_uuid_get_with_http_info(belongs_to_uuid, uuid, **kwargs)
        else:
            (data) = self.file_download_link_belongs_to_uuid_uuid_get_with_http_info(belongs_to_uuid, uuid, **kwargs)
            return data

    def file_download_link_belongs_to_uuid_uuid_get_with_http_info(self, belongs_to_uuid, uuid, **kwargs):
        """
        Gets file download link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_download_link_belongs_to_uuid_uuid_get_with_http_info(belongs_to_uuid, uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str belongs_to_uuid: UUID of entity file belongs to (required)
        :param str uuid: File UUID (required)
        :return: FileDownloadLinkResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['belongs_to_uuid', 'uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_download_link_belongs_to_uuid_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'belongs_to_uuid' is set
        if ('belongs_to_uuid' not in params) or (params['belongs_to_uuid'] is None):
            raise ValueError("Missing the required parameter `belongs_to_uuid` when calling `file_download_link_belongs_to_uuid_uuid_get`")
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params) or (params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `file_download_link_belongs_to_uuid_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'belongs_to_uuid' in params:
            path_params['belongs_to_uuid'] = params['belongs_to_uuid']
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file/download_link/{belongs_to_uuid}/{uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FileDownloadLinkResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_file_uuid_get(self, file_uuid, **kwargs):
        """
        Shows file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_file_uuid_get(file_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str file_uuid: UUID of file to show (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_file_uuid_get_with_http_info(file_uuid, **kwargs)
        else:
            (data) = self.file_file_uuid_get_with_http_info(file_uuid, **kwargs)
            return data

    def file_file_uuid_get_with_http_info(self, file_uuid, **kwargs):
        """
        Shows file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_file_uuid_get_with_http_info(file_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str file_uuid: UUID of file to show (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_file_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_uuid' is set
        if ('file_uuid' not in params) or (params['file_uuid'] is None):
            raise ValueError("Missing the required parameter `file_uuid` when calling `file_file_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'file_uuid' in params:
            path_params['file_uuid'] = params['file_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/octet-stream'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file/{file_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_list_get(self, **kwargs):
        """
        Gets files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str belongs_to_field:
        :param str belongs_to_table:
        :param bool public:
        :param str uuid:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_list_get_with_http_info(**kwargs)
        else:
            (data) = self.file_list_get_with_http_info(**kwargs)
            return data

    def file_list_get_with_http_info(self, **kwargs):
        """
        Gets files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str belongs_to_field:
        :param str belongs_to_table:
        :param bool public:
        :param str uuid:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'belongs_to_field', 'belongs_to_table', 'public', 'uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'belongs_to_field' in params:
            query_params.append(('belongs_to_field', params['belongs_to_field']))
        if 'belongs_to_table' in params:
            query_params.append(('belongs_to_table', params['belongs_to_table']))
        if 'public' in params:
            query_params.append(('public', params['public']))
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_list_tmp_get(self, **kwargs):
        """
        Gets tmp files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_list_tmp_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_list_tmp_get_with_http_info(**kwargs)
        else:
            (data) = self.file_list_tmp_get_with_http_info(**kwargs)
            return data

    def file_list_tmp_get_with_http_info(self, **kwargs):
        """
        Gets tmp files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_list_tmp_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_list_tmp_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file/list_tmp', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def file_post(self, belongs_to, file, **kwargs):
        """
        Creates new file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_post(belongs_to, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str belongs_to: Entity and field which file should belong to (required)
        :param file file: File to upload (required)
        :param bool public: Whether file can be publicly available
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.file_post_with_http_info(belongs_to, file, **kwargs)
        else:
            (data) = self.file_post_with_http_info(belongs_to, file, **kwargs)
            return data

    def file_post_with_http_info(self, belongs_to, file, **kwargs):
        """
        Creates new file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.file_post_with_http_info(belongs_to, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str belongs_to: Entity and field which file should belong to (required)
        :param file file: File to upload (required)
        :param bool public: Whether file can be publicly available
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['belongs_to', 'file', 'public']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'belongs_to' is set
        if ('belongs_to' not in params) or (params['belongs_to'] is None):
            raise ValueError("Missing the required parameter `belongs_to` when calling `file_post`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `file_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'belongs_to' in params:
            form_params.append(('belongs_to', params['belongs_to']))
        if 'public' in params:
            form_params.append(('public', params['public']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/file', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def image_file_name_get(self, file_name, **kwargs):
        """
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_file_name_get(file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str file_name: file name (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.image_file_name_get_with_http_info(file_name, **kwargs)
        else:
            (data) = self.image_file_name_get_with_http_info(file_name, **kwargs)
            return data

    def image_file_name_get_with_http_info(self, file_name, **kwargs):
        """
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_file_name_get_with_http_info(file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str file_name: file name (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_file_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params) or (params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `image_file_name_get`")


        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file_name'] = params['file_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/image/{file_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def image_post(self, file, **kwargs):
        """
        Creates new simplefile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_post(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to upload (required)
        :return: ObjectCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.image_post_with_http_info(file, **kwargs)
        else:
            (data) = self.image_post_with_http_info(file, **kwargs)
            return data

    def image_post_with_http_info(self, file, **kwargs):
        """
        Creates new simplefile
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_post_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to upload (required)
        :return: ObjectCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `image_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/image', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreated',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_list_get(self, **kwargs):
        """
        Gets packagelrns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param int amount:
        :param int cps:
        :param int dip_count:
        :param bool enabled:
        :param int lrn_port:
        :param str package_lrn_uuid:
        :param str package_name:
        :param str type:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_list_get_with_http_info(**kwargs)
        else:
            (data) = self.package_lrn_list_get_with_http_info(**kwargs)
            return data

    def package_lrn_list_get_with_http_info(self, **kwargs):
        """
        Gets packagelrns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param int amount:
        :param int cps:
        :param int dip_count:
        :param bool enabled:
        :param int lrn_port:
        :param str package_lrn_uuid:
        :param str package_name:
        :param str type:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'amount', 'cps', 'dip_count', 'enabled', 'lrn_port', 'package_lrn_uuid', 'package_name', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'amount' in params:
            query_params.append(('amount', params['amount']))
        if 'cps' in params:
            query_params.append(('cps', params['cps']))
        if 'dip_count' in params:
            query_params.append(('dip_count', params['dip_count']))
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))
        if 'lrn_port' in params:
            query_params.append(('lrn_port', params['lrn_port']))
        if 'package_lrn_uuid' in params:
            query_params.append(('package_lrn_uuid', params['package_lrn_uuid']))
        if 'package_name' in params:
            query_params.append(('package_name', params['package_name']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_list_get(self, **kwargs):
        """
        Gets packageswitchs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param int amount:
        :param bool enabled:
        :param int minute_count:
        :param str package_name:
        :param str package_switch_uuid:
        :param int switch_port:
        :param str switch_uuid:
        :param str type:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_list_get_with_http_info(**kwargs)
        else:
            (data) = self.package_switch_list_get_with_http_info(**kwargs)
            return data

    def package_switch_list_get_with_http_info(self, **kwargs):
        """
        Gets packageswitchs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param int amount:
        :param bool enabled:
        :param int minute_count:
        :param str package_name:
        :param str package_switch_uuid:
        :param int switch_port:
        :param str switch_uuid:
        :param str type:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'amount', 'enabled', 'minute_count', 'package_name', 'package_switch_uuid', 'switch_port', 'switch_uuid', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'amount' in params:
            query_params.append(('amount', params['amount']))
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))
        if 'minute_count' in params:
            query_params.append(('minute_count', params['minute_count']))
        if 'package_name' in params:
            query_params.append(('package_name', params['package_name']))
        if 'package_switch_uuid' in params:
            query_params.append(('package_switch_uuid', params['package_switch_uuid']))
        if 'switch_port' in params:
            query_params.append(('switch_port', params['switch_port']))
        if 'switch_uuid' in params:
            query_params.append(('switch_uuid', params['switch_uuid']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
