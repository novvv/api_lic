# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def home_get(self, **kwargs):
        """
        Gets user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.home_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.home_get_with_http_info(**kwargs)
        else:
            (data) = self.home_get_with_http_info(**kwargs)
            return data

    def home_get_with_http_info(self, **kwargs):
        """
        Gets user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.home_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method home_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/home', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2007',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def home_patch(self, **kwargs):
        """
        Modifies user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.home_patch(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserInfoModify body: User to modify
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.home_patch_with_http_info(**kwargs)
        else:
            (data) = self.home_patch_with_http_info(**kwargs)
            return data

    def home_patch_with_http_info(self, **kwargs):
        """
        Modifies user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.home_patch_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserInfoModify body: User to modify
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method home_patch" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/home', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2007',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_license_uuid_delete(self, license_uuid, **kwargs):
        """
        Deletes license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_delete(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_license_uuid_delete_with_http_info(license_uuid, **kwargs)
        else:
            (data) = self.license_license_uuid_delete_with_http_info(license_uuid, **kwargs)
            return data

    def license_license_uuid_delete_with_http_info(self, license_uuid, **kwargs):
        """
        Deletes license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_delete_with_http_info(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_license_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_uuid' is set
        if ('license_uuid' not in params) or (params['license_uuid'] is None):
            raise ValueError("Missing the required parameter `license_uuid` when calling `license_license_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'license_uuid' in params:
            path_params['license_uuid'] = params['license_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license/{license_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_license_uuid_get(self, license_uuid, **kwargs):
        """
        Gets license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_get(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_license_uuid_get_with_http_info(license_uuid, **kwargs)
        else:
            (data) = self.license_license_uuid_get_with_http_info(license_uuid, **kwargs)
            return data

    def license_license_uuid_get_with_http_info(self, license_uuid, **kwargs):
        """
        Gets license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_get_with_http_info(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_license_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_uuid' is set
        if ('license_uuid' not in params) or (params['license_uuid'] is None):
            raise ValueError("Missing the required parameter `license_uuid` when calling `license_license_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'license_uuid' in params:
            path_params['license_uuid'] = params['license_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license/{license_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2008',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_license_uuid_patch(self, license_uuid, **kwargs):
        """
        Modifies license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_patch(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :param LicenseModify body: License to modify
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_license_uuid_patch_with_http_info(license_uuid, **kwargs)
        else:
            (data) = self.license_license_uuid_patch_with_http_info(license_uuid, **kwargs)
            return data

    def license_license_uuid_patch_with_http_info(self, license_uuid, **kwargs):
        """
        Modifies license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_license_uuid_patch_with_http_info(license_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_uuid: License id to get info about (required)
        :param LicenseModify body: License to modify
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_license_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_uuid' is set
        if ('license_uuid' not in params) or (params['license_uuid'] is None):
            raise ValueError("Missing the required parameter `license_uuid` when calling `license_license_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'license_uuid' in params:
            path_params['license_uuid'] = params['license_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license/{license_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2008',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_list_get(self, **kwargs):
        """
        Gets licenses
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param bool is_lrn_license:
        :param bool is_switch_license:
        :param str license_uuid:
        :param str rate_uuid:
        :param str type:
        :param str user_email:
        :param str user_uuid:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_list_get_with_http_info(**kwargs)
        else:
            (data) = self.license_list_get_with_http_info(**kwargs)
            return data

    def license_list_get_with_http_info(self, **kwargs):
        """
        Gets licenses
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param bool is_lrn_license:
        :param bool is_switch_license:
        :param str license_uuid:
        :param str rate_uuid:
        :param str type:
        :param str user_email:
        :param str user_uuid:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'is_lrn_license', 'is_switch_license', 'license_uuid', 'rate_uuid', 'type', 'user_email', 'user_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'is_lrn_license' in params:
            query_params.append(('is_lrn_license', params['is_lrn_license']))
        if 'is_switch_license' in params:
            query_params.append(('is_switch_license', params['is_switch_license']))
        if 'license_uuid' in params:
            query_params.append(('license_uuid', params['license_uuid']))
        if 'rate_uuid' in params:
            query_params.append(('rate_uuid', params['rate_uuid']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'user_email' in params:
            query_params.append(('user_email', params['user_email']))
        if 'user_uuid' in params:
            query_params.append(('user_uuid', params['user_uuid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2009',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_period_license_period_uuid_delete(self, license_period_uuid, **kwargs):
        """
        Deletes licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_delete(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_period_license_period_uuid_delete_with_http_info(license_period_uuid, **kwargs)
        else:
            (data) = self.license_period_license_period_uuid_delete_with_http_info(license_period_uuid, **kwargs)
            return data

    def license_period_license_period_uuid_delete_with_http_info(self, license_period_uuid, **kwargs):
        """
        Deletes licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_delete_with_http_info(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_period_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_period_license_period_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_period_uuid' is set
        if ('license_period_uuid' not in params) or (params['license_period_uuid'] is None):
            raise ValueError("Missing the required parameter `license_period_uuid` when calling `license_period_license_period_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'license_period_uuid' in params:
            path_params['license_period_uuid'] = params['license_period_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license_period/{license_period_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_period_license_period_uuid_get(self, license_period_uuid, **kwargs):
        """
        Gets licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_get(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_period_license_period_uuid_get_with_http_info(license_period_uuid, **kwargs)
        else:
            (data) = self.license_period_license_period_uuid_get_with_http_info(license_period_uuid, **kwargs)
            return data

    def license_period_license_period_uuid_get_with_http_info(self, license_period_uuid, **kwargs):
        """
        Gets licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_get_with_http_info(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_period_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_period_license_period_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_period_uuid' is set
        if ('license_period_uuid' not in params) or (params['license_period_uuid'] is None):
            raise ValueError("Missing the required parameter `license_period_uuid` when calling `license_period_license_period_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'license_period_uuid' in params:
            path_params['license_period_uuid'] = params['license_period_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license_period/{license_period_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_period_license_period_uuid_patch(self, license_period_uuid, **kwargs):
        """
        Modifies licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_patch(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :param LicensePeriodModify body: LicensePeriod to modify
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_period_license_period_uuid_patch_with_http_info(license_period_uuid, **kwargs)
        else:
            (data) = self.license_period_license_period_uuid_patch_with_http_info(license_period_uuid, **kwargs)
            return data

    def license_period_license_period_uuid_patch_with_http_info(self, license_period_uuid, **kwargs):
        """
        Modifies licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_license_period_uuid_patch_with_http_info(license_period_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str license_period_uuid: LicensePeriod id to get info about (required)
        :param LicensePeriodModify body: LicensePeriod to modify
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['license_period_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_period_license_period_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'license_period_uuid' is set
        if ('license_period_uuid' not in params) or (params['license_period_uuid'] is None):
            raise ValueError("Missing the required parameter `license_period_uuid` when calling `license_period_license_period_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'license_period_uuid' in params:
            path_params['license_period_uuid'] = params['license_period_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license_period/{license_period_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20010',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_period_list_get(self, **kwargs):
        """
        Gets licenseperiods
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str license_period_uuid:
        :param str license_uuid:
        :param str user_uuid:
        :param str cost_gt:
        :param str cost_lt:
        :param str end_time_gt:
        :param str end_time_lt:
        :param str start_time_gt:
        :param str start_time_lt:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_period_list_get_with_http_info(**kwargs)
        else:
            (data) = self.license_period_list_get_with_http_info(**kwargs)
            return data

    def license_period_list_get_with_http_info(self, **kwargs):
        """
        Gets licenseperiods
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str license_period_uuid:
        :param str license_uuid:
        :param str user_uuid:
        :param str cost_gt:
        :param str cost_lt:
        :param str end_time_gt:
        :param str end_time_lt:
        :param str start_time_gt:
        :param str start_time_lt:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'license_period_uuid', 'license_uuid', 'user_uuid', 'cost_gt', 'cost_lt', 'end_time_gt', 'end_time_lt', 'start_time_gt', 'start_time_lt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_period_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'license_period_uuid' in params:
            query_params.append(('license_period_uuid', params['license_period_uuid']))
        if 'license_uuid' in params:
            query_params.append(('license_uuid', params['license_uuid']))
        if 'user_uuid' in params:
            query_params.append(('user_uuid', params['user_uuid']))
        if 'cost_gt' in params:
            query_params.append(('cost_gt', params['cost_gt']))
        if 'cost_lt' in params:
            query_params.append(('cost_lt', params['cost_lt']))
        if 'end_time_gt' in params:
            query_params.append(('end_time_gt', params['end_time_gt']))
        if 'end_time_lt' in params:
            query_params.append(('end_time_lt', params['end_time_lt']))
        if 'start_time_gt' in params:
            query_params.append(('start_time_gt', params['start_time_gt']))
        if 'start_time_lt' in params:
            query_params.append(('start_time_lt', params['start_time_lt']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license_period/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_period_post(self, **kwargs):
        """
        Creates new licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LicensePeriod body: LicensePeriod to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_period_post_with_http_info(**kwargs)
        else:
            (data) = self.license_period_post_with_http_info(**kwargs)
            return data

    def license_period_post_with_http_info(self, **kwargs):
        """
        Creates new licenseperiod
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_period_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LicensePeriod body: LicensePeriod to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_period_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license_period', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def license_post(self, **kwargs):
        """
        Creates new license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param License body: License to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.license_post_with_http_info(**kwargs)
        else:
            (data) = self.license_post_with_http_info(**kwargs)
            return data

    def license_post_with_http_info(self, **kwargs):
        """
        Creates new license
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.license_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param License body: License to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/license', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_list_get(self, **kwargs):
        """
        Gets notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str content:
        :param str notification_uuid:
        :param str subject:
        :param str user_uuid:
        :param str created_on_gt:
        :param str created_on_lt:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_list_get_with_http_info(**kwargs)
        else:
            (data) = self.notification_list_get_with_http_info(**kwargs)
            return data

    def notification_list_get_with_http_info(self, **kwargs):
        """
        Gets notifications
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str content:
        :param str notification_uuid:
        :param str subject:
        :param str user_uuid:
        :param str created_on_gt:
        :param str created_on_lt:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'content', 'notification_uuid', 'subject', 'user_uuid', 'created_on_gt', 'created_on_lt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'content' in params:
            query_params.append(('content', params['content']))
        if 'notification_uuid' in params:
            query_params.append(('notification_uuid', params['notification_uuid']))
        if 'subject' in params:
            query_params.append(('subject', params['subject']))
        if 'user_uuid' in params:
            query_params.append(('user_uuid', params['user_uuid']))
        if 'created_on_gt' in params:
            query_params.append(('created_on_gt', params['created_on_gt']))
        if 'created_on_lt' in params:
            query_params.append(('created_on_lt', params['created_on_lt']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_list_get(self, **kwargs):
        """
        Gets payments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str license_period_uuid:
        :param str payment_uuid:
        :param str type:
        :param str user_uuid:
        :param str amount_gt:
        :param str amount_lt:
        :param str paid_time_gt:
        :param str paid_time_lt:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_list_get_with_http_info(**kwargs)
        else:
            (data) = self.payment_list_get_with_http_info(**kwargs)
            return data

    def payment_list_get_with_http_info(self, **kwargs):
        """
        Gets payments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str license_period_uuid:
        :param str payment_uuid:
        :param str type:
        :param str user_uuid:
        :param str amount_gt:
        :param str amount_lt:
        :param str paid_time_gt:
        :param str paid_time_lt:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'license_period_uuid', 'payment_uuid', 'type', 'user_uuid', 'amount_gt', 'amount_lt', 'paid_time_gt', 'paid_time_lt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_list_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'license_period_uuid' in params:
            query_params.append(('license_period_uuid', params['license_period_uuid']))
        if 'payment_uuid' in params:
            query_params.append(('payment_uuid', params['payment_uuid']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'user_uuid' in params:
            query_params.append(('user_uuid', params['user_uuid']))
        if 'amount_gt' in params:
            query_params.append(('amount_gt', params['amount_gt']))
        if 'amount_lt' in params:
            query_params.append(('amount_lt', params['amount_lt']))
        if 'paid_time_gt' in params:
            query_params.append(('paid_time_gt', params['paid_time_gt']))
        if 'paid_time_lt' in params:
            query_params.append(('paid_time_lt', params['paid_time_lt']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20014',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_payment_uuid_delete(self, payment_uuid, **kwargs):
        """
        Deletes payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_delete(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_payment_uuid_delete_with_http_info(payment_uuid, **kwargs)
        else:
            (data) = self.payment_payment_uuid_delete_with_http_info(payment_uuid, **kwargs)
            return data

    def payment_payment_uuid_delete_with_http_info(self, payment_uuid, **kwargs):
        """
        Deletes payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_delete_with_http_info(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_payment_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_uuid' is set
        if ('payment_uuid' not in params) or (params['payment_uuid'] is None):
            raise ValueError("Missing the required parameter `payment_uuid` when calling `payment_payment_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'payment_uuid' in params:
            path_params['payment_uuid'] = params['payment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment/{payment_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_payment_uuid_get(self, payment_uuid, **kwargs):
        """
        Gets payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_get(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_payment_uuid_get_with_http_info(payment_uuid, **kwargs)
        else:
            (data) = self.payment_payment_uuid_get_with_http_info(payment_uuid, **kwargs)
            return data

    def payment_payment_uuid_get_with_http_info(self, payment_uuid, **kwargs):
        """
        Gets payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_get_with_http_info(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_payment_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_uuid' is set
        if ('payment_uuid' not in params) or (params['payment_uuid'] is None):
            raise ValueError("Missing the required parameter `payment_uuid` when calling `payment_payment_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'payment_uuid' in params:
            path_params['payment_uuid'] = params['payment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment/{payment_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_payment_uuid_patch(self, payment_uuid, **kwargs):
        """
        Modifies payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_patch(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :param PaymentModify body: Payment to modify
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_payment_uuid_patch_with_http_info(payment_uuid, **kwargs)
        else:
            (data) = self.payment_payment_uuid_patch_with_http_info(payment_uuid, **kwargs)
            return data

    def payment_payment_uuid_patch_with_http_info(self, payment_uuid, **kwargs):
        """
        Modifies payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_payment_uuid_patch_with_http_info(payment_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_uuid: Payment id to get info about (required)
        :param PaymentModify body: Payment to modify
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_payment_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_uuid' is set
        if ('payment_uuid' not in params) or (params['payment_uuid'] is None):
            raise ValueError("Missing the required parameter `payment_uuid` when calling `payment_payment_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'payment_uuid' in params:
            path_params['payment_uuid'] = params['payment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment/{payment_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20013',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_paypal_post(self, **kwargs):
        """
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_paypal_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_paypal_post_with_http_info(**kwargs)
        else:
            (data) = self.payment_paypal_post_with_http_info(**kwargs)
            return data

    def payment_paypal_post_with_http_info(self, **kwargs):
        """
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_paypal_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_paypal_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment/paypal', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payment_post(self, **kwargs):
        """
        Creates new payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment body: Payment to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payment_post_with_http_info(**kwargs)
        else:
            (data) = self.payment_post_with_http_info(**kwargs)
            return data

    def payment_post_with_http_info(self, **kwargs):
        """
        Creates new payment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payment_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Payment body: Payment to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/payment', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
