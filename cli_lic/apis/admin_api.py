# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AdminApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def notification_notification_uuid_delete(self, notification_uuid, **kwargs):
        """
        Deletes notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_delete(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_delete_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_delete_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_delete_with_http_info(self, notification_uuid, **kwargs):
        """
        Deletes notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_delete_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_notification_uuid_get(self, notification_uuid, **kwargs):
        """
        Gets notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_get(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_get_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_get_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_get_with_http_info(self, notification_uuid, **kwargs):
        """
        Gets notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_get_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_notification_uuid_patch(self, notification_uuid, **kwargs):
        """
        Modifies notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_patch(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :param NotificationModify body: Notification to modify
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_patch_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_patch_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_patch_with_http_info(self, notification_uuid, **kwargs):
        """
        Modifies notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_patch_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :param NotificationModify body: Notification to modify
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_post(self, **kwargs):
        """
        Creates new notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Notification body: Notification to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_post_with_http_info(**kwargs)
        else:
            (data) = self.notification_post_with_http_info(**kwargs)
            return data

    def notification_post_with_http_info(self, **kwargs):
        """
        Creates new notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Notification body: Notification to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def rate_post(self, **kwargs):
        """
        Creates new rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Rate body: Rate to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_post_with_http_info(**kwargs)
        else:
            (data) = self.rate_post_with_http_info(**kwargs)
            return data

    def rate_post_with_http_info(self, **kwargs):
        """
        Creates new rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Rate body: Rate to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/rate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def rate_rate_uuid_delete(self, rate_uuid, **kwargs):
        """
        Deletes rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_delete(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_rate_uuid_delete_with_http_info(rate_uuid, **kwargs)
        else:
            (data) = self.rate_rate_uuid_delete_with_http_info(rate_uuid, **kwargs)
            return data

    def rate_rate_uuid_delete_with_http_info(self, rate_uuid, **kwargs):
        """
        Deletes rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_delete_with_http_info(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rate_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_rate_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rate_uuid' is set
        if ('rate_uuid' not in params) or (params['rate_uuid'] is None):
            raise ValueError("Missing the required parameter `rate_uuid` when calling `rate_rate_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'rate_uuid' in params:
            path_params['rate_uuid'] = params['rate_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/rate/{rate_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def rate_rate_uuid_get(self, rate_uuid, **kwargs):
        """
        Gets rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_get(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_rate_uuid_get_with_http_info(rate_uuid, **kwargs)
        else:
            (data) = self.rate_rate_uuid_get_with_http_info(rate_uuid, **kwargs)
            return data

    def rate_rate_uuid_get_with_http_info(self, rate_uuid, **kwargs):
        """
        Gets rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_get_with_http_info(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rate_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_rate_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rate_uuid' is set
        if ('rate_uuid' not in params) or (params['rate_uuid'] is None):
            raise ValueError("Missing the required parameter `rate_uuid` when calling `rate_rate_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'rate_uuid' in params:
            path_params['rate_uuid'] = params['rate_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/rate/{rate_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def rate_rate_uuid_patch(self, rate_uuid, **kwargs):
        """
        Modifies rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_patch(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :param RateModify body: Rate to modify
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_rate_uuid_patch_with_http_info(rate_uuid, **kwargs)
        else:
            (data) = self.rate_rate_uuid_patch_with_http_info(rate_uuid, **kwargs)
            return data

    def rate_rate_uuid_patch_with_http_info(self, rate_uuid, **kwargs):
        """
        Modifies rate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_rate_uuid_patch_with_http_info(rate_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_uuid: Rate id to get info about (required)
        :param RateModify body: Rate to modify
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rate_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_rate_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rate_uuid' is set
        if ('rate_uuid' not in params) or (params['rate_uuid'] is None):
            raise ValueError("Missing the required parameter `rate_uuid` when calling `rate_rate_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'rate_uuid' in params:
            path_params['rate_uuid'] = params['rate_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/rate/{rate_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
