# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AdminApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def notification_notification_uuid_delete(self, notification_uuid, **kwargs):
        """
        Deletes notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_delete(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_delete_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_delete_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_delete_with_http_info(self, notification_uuid, **kwargs):
        """
        Deletes notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_delete_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_notification_uuid_get(self, notification_uuid, **kwargs):
        """
        Gets notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_get(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_get_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_get_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_get_with_http_info(self, notification_uuid, **kwargs):
        """
        Gets notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_get_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_notification_uuid_patch(self, notification_uuid, **kwargs):
        """
        Modifies notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_patch(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :param NotificationModify body: Notification to modify
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_notification_uuid_patch_with_http_info(notification_uuid, **kwargs)
        else:
            (data) = self.notification_notification_uuid_patch_with_http_info(notification_uuid, **kwargs)
            return data

    def notification_notification_uuid_patch_with_http_info(self, notification_uuid, **kwargs):
        """
        Modifies notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_notification_uuid_patch_with_http_info(notification_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str notification_uuid: Notification id to get info about (required)
        :param NotificationModify body: Notification to modify
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_notification_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_uuid' is set
        if ('notification_uuid' not in params) or (params['notification_uuid'] is None):
            raise ValueError("Missing the required parameter `notification_uuid` when calling `notification_notification_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'notification_uuid' in params:
            path_params['notification_uuid'] = params['notification_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification/{notification_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notification_post(self, **kwargs):
        """
        Creates new notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Notification body: Notification to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notification_post_with_http_info(**kwargs)
        else:
            (data) = self.notification_post_with_http_info(**kwargs)
            return data

    def notification_post_with_http_info(self, **kwargs):
        """
        Creates new notification
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notification_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Notification body: Notification to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/notification', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_package_lrn_uuid_delete(self, package_lrn_uuid, **kwargs):
        """
        Deletes packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_delete(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_package_lrn_uuid_delete_with_http_info(package_lrn_uuid, **kwargs)
        else:
            (data) = self.package_lrn_package_lrn_uuid_delete_with_http_info(package_lrn_uuid, **kwargs)
            return data

    def package_lrn_package_lrn_uuid_delete_with_http_info(self, package_lrn_uuid, **kwargs):
        """
        Deletes packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_delete_with_http_info(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_lrn_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_package_lrn_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_lrn_uuid' is set
        if ('package_lrn_uuid' not in params) or (params['package_lrn_uuid'] is None):
            raise ValueError("Missing the required parameter `package_lrn_uuid` when calling `package_lrn_package_lrn_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'package_lrn_uuid' in params:
            path_params['package_lrn_uuid'] = params['package_lrn_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn/{package_lrn_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_package_lrn_uuid_get(self, package_lrn_uuid, **kwargs):
        """
        Gets packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_get(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_package_lrn_uuid_get_with_http_info(package_lrn_uuid, **kwargs)
        else:
            (data) = self.package_lrn_package_lrn_uuid_get_with_http_info(package_lrn_uuid, **kwargs)
            return data

    def package_lrn_package_lrn_uuid_get_with_http_info(self, package_lrn_uuid, **kwargs):
        """
        Gets packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_get_with_http_info(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_lrn_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_package_lrn_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_lrn_uuid' is set
        if ('package_lrn_uuid' not in params) or (params['package_lrn_uuid'] is None):
            raise ValueError("Missing the required parameter `package_lrn_uuid` when calling `package_lrn_package_lrn_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'package_lrn_uuid' in params:
            path_params['package_lrn_uuid'] = params['package_lrn_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn/{package_lrn_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_package_lrn_uuid_patch(self, package_lrn_uuid, **kwargs):
        """
        Modifies packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_patch(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :param PackageLrnModify body: PackageLrn to modify
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_package_lrn_uuid_patch_with_http_info(package_lrn_uuid, **kwargs)
        else:
            (data) = self.package_lrn_package_lrn_uuid_patch_with_http_info(package_lrn_uuid, **kwargs)
            return data

    def package_lrn_package_lrn_uuid_patch_with_http_info(self, package_lrn_uuid, **kwargs):
        """
        Modifies packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_patch_with_http_info(package_lrn_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: PackageLrn id to get info about (required)
        :param PackageLrnModify body: PackageLrn to modify
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_lrn_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_package_lrn_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_lrn_uuid' is set
        if ('package_lrn_uuid' not in params) or (params['package_lrn_uuid'] is None):
            raise ValueError("Missing the required parameter `package_lrn_uuid` when calling `package_lrn_package_lrn_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'package_lrn_uuid' in params:
            path_params['package_lrn_uuid'] = params['package_lrn_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn/{package_lrn_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_package_lrn_uuid_user_uuid_delete(self, package_lrn_uuid, user_uuid, **kwargs):
        """
        Deletes licenselrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_user_uuid_delete(package_lrn_uuid, user_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: package uuid (required)
        :param str user_uuid: LicenseLrn id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_package_lrn_uuid_user_uuid_delete_with_http_info(package_lrn_uuid, user_uuid, **kwargs)
        else:
            (data) = self.package_lrn_package_lrn_uuid_user_uuid_delete_with_http_info(package_lrn_uuid, user_uuid, **kwargs)
            return data

    def package_lrn_package_lrn_uuid_user_uuid_delete_with_http_info(self, package_lrn_uuid, user_uuid, **kwargs):
        """
        Deletes licenselrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_package_lrn_uuid_user_uuid_delete_with_http_info(package_lrn_uuid, user_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_lrn_uuid: package uuid (required)
        :param str user_uuid: LicenseLrn id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_lrn_uuid', 'user_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_package_lrn_uuid_user_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_lrn_uuid' is set
        if ('package_lrn_uuid' not in params) or (params['package_lrn_uuid'] is None):
            raise ValueError("Missing the required parameter `package_lrn_uuid` when calling `package_lrn_package_lrn_uuid_user_uuid_delete`")
        # verify the required parameter 'user_uuid' is set
        if ('user_uuid' not in params) or (params['user_uuid'] is None):
            raise ValueError("Missing the required parameter `user_uuid` when calling `package_lrn_package_lrn_uuid_user_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'package_lrn_uuid' in params:
            path_params['package_lrn_uuid'] = params['package_lrn_uuid']
        if 'user_uuid' in params:
            path_params['user_uuid'] = params['user_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn/{package_lrn_uuid}/{user_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_lrn_post(self, **kwargs):
        """
        Creates new packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PackageLrn body: PackageLrn to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_lrn_post_with_http_info(**kwargs)
        else:
            (data) = self.package_lrn_post_with_http_info(**kwargs)
            return data

    def package_lrn_post_with_http_info(self, **kwargs):
        """
        Creates new packagelrn
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_lrn_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PackageLrn body: PackageLrn to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_lrn_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_lrn', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_package_switch_uuid_delete(self, package_switch_uuid, **kwargs):
        """
        Deletes packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_delete(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_package_switch_uuid_delete_with_http_info(package_switch_uuid, **kwargs)
        else:
            (data) = self.package_switch_package_switch_uuid_delete_with_http_info(package_switch_uuid, **kwargs)
            return data

    def package_switch_package_switch_uuid_delete_with_http_info(self, package_switch_uuid, **kwargs):
        """
        Deletes packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_delete_with_http_info(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_switch_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_package_switch_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_switch_uuid' is set
        if ('package_switch_uuid' not in params) or (params['package_switch_uuid'] is None):
            raise ValueError("Missing the required parameter `package_switch_uuid` when calling `package_switch_package_switch_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'package_switch_uuid' in params:
            path_params['package_switch_uuid'] = params['package_switch_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch/{package_switch_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_package_switch_uuid_get(self, package_switch_uuid, **kwargs):
        """
        Gets packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_get(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_package_switch_uuid_get_with_http_info(package_switch_uuid, **kwargs)
        else:
            (data) = self.package_switch_package_switch_uuid_get_with_http_info(package_switch_uuid, **kwargs)
            return data

    def package_switch_package_switch_uuid_get_with_http_info(self, package_switch_uuid, **kwargs):
        """
        Gets packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_get_with_http_info(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_switch_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_package_switch_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_switch_uuid' is set
        if ('package_switch_uuid' not in params) or (params['package_switch_uuid'] is None):
            raise ValueError("Missing the required parameter `package_switch_uuid` when calling `package_switch_package_switch_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'package_switch_uuid' in params:
            path_params['package_switch_uuid'] = params['package_switch_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch/{package_switch_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_package_switch_uuid_patch(self, package_switch_uuid, **kwargs):
        """
        Modifies packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_patch(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :param PackageSwitchModify body: PackageSwitch to modify
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_package_switch_uuid_patch_with_http_info(package_switch_uuid, **kwargs)
        else:
            (data) = self.package_switch_package_switch_uuid_patch_with_http_info(package_switch_uuid, **kwargs)
            return data

    def package_switch_package_switch_uuid_patch_with_http_info(self, package_switch_uuid, **kwargs):
        """
        Modifies packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_patch_with_http_info(package_switch_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: PackageSwitch id to get info about (required)
        :param PackageSwitchModify body: PackageSwitch to modify
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_switch_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_package_switch_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_switch_uuid' is set
        if ('package_switch_uuid' not in params) or (params['package_switch_uuid'] is None):
            raise ValueError("Missing the required parameter `package_switch_uuid` when calling `package_switch_package_switch_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'package_switch_uuid' in params:
            path_params['package_switch_uuid'] = params['package_switch_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch/{package_switch_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_package_switch_uuid_user_uuid_delete(self, package_switch_uuid, user_uuid, **kwargs):
        """
        Deletes licenseswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_user_uuid_delete(package_switch_uuid, user_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: package uuid (required)
        :param str user_uuid: LicenseSwitch id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_package_switch_uuid_user_uuid_delete_with_http_info(package_switch_uuid, user_uuid, **kwargs)
        else:
            (data) = self.package_switch_package_switch_uuid_user_uuid_delete_with_http_info(package_switch_uuid, user_uuid, **kwargs)
            return data

    def package_switch_package_switch_uuid_user_uuid_delete_with_http_info(self, package_switch_uuid, user_uuid, **kwargs):
        """
        Deletes licenseswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_package_switch_uuid_user_uuid_delete_with_http_info(package_switch_uuid, user_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str package_switch_uuid: package uuid (required)
        :param str user_uuid: LicenseSwitch id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_switch_uuid', 'user_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_package_switch_uuid_user_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_switch_uuid' is set
        if ('package_switch_uuid' not in params) or (params['package_switch_uuid'] is None):
            raise ValueError("Missing the required parameter `package_switch_uuid` when calling `package_switch_package_switch_uuid_user_uuid_delete`")
        # verify the required parameter 'user_uuid' is set
        if ('user_uuid' not in params) or (params['user_uuid'] is None):
            raise ValueError("Missing the required parameter `user_uuid` when calling `package_switch_package_switch_uuid_user_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'package_switch_uuid' in params:
            path_params['package_switch_uuid'] = params['package_switch_uuid']
        if 'user_uuid' in params:
            path_params['user_uuid'] = params['user_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch/{package_switch_uuid}/{user_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def package_switch_post(self, **kwargs):
        """
        Creates new packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PackageSwitch body: PackageSwitch to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.package_switch_post_with_http_info(**kwargs)
        else:
            (data) = self.package_switch_post_with_http_info(**kwargs)
            return data

    def package_switch_post_with_http_info(self, **kwargs):
        """
        Creates new packageswitch
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.package_switch_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PackageSwitch body: PackageSwitch to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method package_switch_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/package_switch', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan_plan_uuid_delete(self, plan_uuid, **kwargs):
        """
        Deletes plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_delete(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_plan_uuid_delete_with_http_info(plan_uuid, **kwargs)
        else:
            (data) = self.plan_plan_uuid_delete_with_http_info(plan_uuid, **kwargs)
            return data

    def plan_plan_uuid_delete_with_http_info(self, plan_uuid, **kwargs):
        """
        Deletes plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_delete_with_http_info(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_plan_uuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_uuid' is set
        if ('plan_uuid' not in params) or (params['plan_uuid'] is None):
            raise ValueError("Missing the required parameter `plan_uuid` when calling `plan_plan_uuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'plan_uuid' in params:
            path_params['plan_uuid'] = params['plan_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/plan/{plan_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Success',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan_plan_uuid_get(self, plan_uuid, **kwargs):
        """
        Gets plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_get(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_plan_uuid_get_with_http_info(plan_uuid, **kwargs)
        else:
            (data) = self.plan_plan_uuid_get_with_http_info(plan_uuid, **kwargs)
            return data

    def plan_plan_uuid_get_with_http_info(self, plan_uuid, **kwargs):
        """
        Gets plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_get_with_http_info(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_plan_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_uuid' is set
        if ('plan_uuid' not in params) or (params['plan_uuid'] is None):
            raise ValueError("Missing the required parameter `plan_uuid` when calling `plan_plan_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'plan_uuid' in params:
            path_params['plan_uuid'] = params['plan_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/plan/{plan_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan_plan_uuid_patch(self, plan_uuid, **kwargs):
        """
        Modifies plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_patch(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :param PlanModify body: Plan to modify
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_plan_uuid_patch_with_http_info(plan_uuid, **kwargs)
        else:
            (data) = self.plan_plan_uuid_patch_with_http_info(plan_uuid, **kwargs)
            return data

    def plan_plan_uuid_patch_with_http_info(self, plan_uuid, **kwargs):
        """
        Modifies plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_plan_uuid_patch_with_http_info(plan_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str plan_uuid: Plan id to get info about (required)
        :param PlanModify body: Plan to modify
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_plan_uuid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_uuid' is set
        if ('plan_uuid' not in params) or (params['plan_uuid'] is None):
            raise ValueError("Missing the required parameter `plan_uuid` when calling `plan_plan_uuid_patch`")


        collection_formats = {}

        path_params = {}
        if 'plan_uuid' in params:
            path_params['plan_uuid'] = params['plan_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/plan/{plan_uuid}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan_post(self, **kwargs):
        """
        Creates new plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Plan body: Plan to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_post_with_http_info(**kwargs)
        else:
            (data) = self.plan_post_with_http_info(**kwargs)
            return data

    def plan_post_with_http_info(self, **kwargs):
        """
        Creates new plan
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Plan body: Plan to create
        :return: ObjectCreatedUuidAsPk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/plan', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ObjectCreatedUuidAsPk',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def transaction_log_get(self, **kwargs):
        """
        Gets transactionlogs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_log_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str amount_lrn:
        :param str amount_switch:
        :param str from_ip:
        :param str license_lrn_uuid:
        :param str license_switch_uuid:
        :param str payment_uuid:
        :param str result:
        :param int status:
        :param str transaction_id:
        :param str transaction_type:
        :param int type:
        :param str amount_total_gt:
        :param str amount_total_lt:
        :param str transaction_time_gt:
        :param str transaction_time_lt:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transaction_log_get_with_http_info(**kwargs)
        else:
            (data) = self.transaction_log_get_with_http_info(**kwargs)
            return data

    def transaction_log_get_with_http_info(self, **kwargs):
        """
        Gets transactionlogs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_log_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page:
        :param int per_page:
        :param str order_by:
        :param str order_dir:
        :param str amount_lrn:
        :param str amount_switch:
        :param str from_ip:
        :param str license_lrn_uuid:
        :param str license_switch_uuid:
        :param str payment_uuid:
        :param str result:
        :param int status:
        :param str transaction_id:
        :param str transaction_type:
        :param int type:
        :param str amount_total_gt:
        :param str amount_total_lt:
        :param str transaction_time_gt:
        :param str transaction_time_lt:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', 'order_by', 'order_dir', 'amount_lrn', 'amount_switch', 'from_ip', 'license_lrn_uuid', 'license_switch_uuid', 'payment_uuid', 'result', 'status', 'transaction_id', 'transaction_type', 'type', 'amount_total_gt', 'amount_total_lt', 'transaction_time_gt', 'transaction_time_lt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_log_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))
        if 'order_dir' in params:
            query_params.append(('order_dir', params['order_dir']))
        if 'amount_lrn' in params:
            query_params.append(('amount_lrn', params['amount_lrn']))
        if 'amount_switch' in params:
            query_params.append(('amount_switch', params['amount_switch']))
        if 'from_ip' in params:
            query_params.append(('from_ip', params['from_ip']))
        if 'license_lrn_uuid' in params:
            query_params.append(('license_lrn_uuid', params['license_lrn_uuid']))
        if 'license_switch_uuid' in params:
            query_params.append(('license_switch_uuid', params['license_switch_uuid']))
        if 'payment_uuid' in params:
            query_params.append(('payment_uuid', params['payment_uuid']))
        if 'result' in params:
            query_params.append(('result', params['result']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))
        if 'transaction_type' in params:
            query_params.append(('transaction_type', params['transaction_type']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'amount_total_gt' in params:
            query_params.append(('amount_total_gt', params['amount_total_gt']))
        if 'amount_total_lt' in params:
            query_params.append(('amount_total_lt', params['amount_total_lt']))
        if 'transaction_time_gt' in params:
            query_params.append(('transaction_time_gt', params['transaction_time_gt']))
        if 'transaction_time_lt' in params:
            query_params.append(('transaction_time_lt', params['transaction_time_lt']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/csv', 'text/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/transaction/log', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2007',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def transaction_transaction_log_uuid_get(self, transaction_log_uuid, **kwargs):
        """
        Gets transactionlog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_transaction_log_uuid_get(transaction_log_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str transaction_log_uuid: TransactionLog id to get info about (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transaction_transaction_log_uuid_get_with_http_info(transaction_log_uuid, **kwargs)
        else:
            (data) = self.transaction_transaction_log_uuid_get_with_http_info(transaction_log_uuid, **kwargs)
            return data

    def transaction_transaction_log_uuid_get_with_http_info(self, transaction_log_uuid, **kwargs):
        """
        Gets transactionlog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transaction_transaction_log_uuid_get_with_http_info(transaction_log_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str transaction_log_uuid: TransactionLog id to get info about (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_log_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_transaction_log_uuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_log_uuid' is set
        if ('transaction_log_uuid' not in params) or (params['transaction_log_uuid'] is None):
            raise ValueError("Missing the required parameter `transaction_log_uuid` when calling `transaction_transaction_log_uuid_get`")


        collection_formats = {}

        path_params = {}
        if 'transaction_log_uuid' in params:
            path_params['transaction_log_uuid'] = params['transaction_log_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['auth_token']

        return self.api_client.call_api('/transaction/{transaction_log_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
