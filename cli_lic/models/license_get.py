# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LicenseGet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_uuid': 'str',
        'lrn': 'LicenseLrn',
        'rate_uuid': 'str',
        'user_uuid': 'str',
        'switch': 'LicenseSwitch',
        'user_email': 'str',
        'periods': 'list[LicensePeriodGet]'
    }

    attribute_map = {
        'license_uuid': 'license_uuid',
        'lrn': 'lrn',
        'rate_uuid': 'rate_uuid',
        'user_uuid': 'user_uuid',
        'switch': 'switch',
        'user_email': 'user_email',
        'periods': 'periods'
    }

    def __init__(self, license_uuid=None, lrn=None, rate_uuid=None, user_uuid=None, switch=None, user_email=None, periods=None):
        """
        LicenseGet - a model defined in Swagger
        """

        self._license_uuid = None
        self._lrn = None
        self._rate_uuid = None
        self._user_uuid = None
        self._switch = None
        self._user_email = None
        self._periods = None

        if license_uuid is not None:
          self.license_uuid = license_uuid
        if lrn is not None:
          self.lrn = lrn
        if rate_uuid is not None:
          self.rate_uuid = rate_uuid
        if user_uuid is not None:
          self.user_uuid = user_uuid
        if switch is not None:
          self.switch = switch
        if user_email is not None:
          self.user_email = user_email
        if periods is not None:
          self.periods = periods

    @property
    def license_uuid(self):
        """
        Gets the license_uuid of this LicenseGet.

        :return: The license_uuid of this LicenseGet.
        :rtype: str
        """
        return self._license_uuid

    @license_uuid.setter
    def license_uuid(self, license_uuid):
        """
        Sets the license_uuid of this LicenseGet.

        :param license_uuid: The license_uuid of this LicenseGet.
        :type: str
        """
        if license_uuid is not None and len(license_uuid) > 36:
            raise ValueError("Invalid value for `license_uuid`, length must be less than or equal to `36`")

        self._license_uuid = license_uuid

    @property
    def lrn(self):
        """
        Gets the lrn of this LicenseGet.

        :return: The lrn of this LicenseGet.
        :rtype: LicenseLrn
        """
        return self._lrn

    @lrn.setter
    def lrn(self, lrn):
        """
        Sets the lrn of this LicenseGet.

        :param lrn: The lrn of this LicenseGet.
        :type: LicenseLrn
        """

        self._lrn = lrn

    @property
    def rate_uuid(self):
        """
        Gets the rate_uuid of this LicenseGet.

        :return: The rate_uuid of this LicenseGet.
        :rtype: str
        """
        return self._rate_uuid

    @rate_uuid.setter
    def rate_uuid(self, rate_uuid):
        """
        Sets the rate_uuid of this LicenseGet.

        :param rate_uuid: The rate_uuid of this LicenseGet.
        :type: str
        """
        if rate_uuid is not None and len(rate_uuid) > 36:
            raise ValueError("Invalid value for `rate_uuid`, length must be less than or equal to `36`")

        self._rate_uuid = rate_uuid

    @property
    def user_uuid(self):
        """
        Gets the user_uuid of this LicenseGet.

        :return: The user_uuid of this LicenseGet.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """
        Sets the user_uuid of this LicenseGet.

        :param user_uuid: The user_uuid of this LicenseGet.
        :type: str
        """
        if user_uuid is not None and len(user_uuid) > 36:
            raise ValueError("Invalid value for `user_uuid`, length must be less than or equal to `36`")

        self._user_uuid = user_uuid

    @property
    def switch(self):
        """
        Gets the switch of this LicenseGet.

        :return: The switch of this LicenseGet.
        :rtype: LicenseSwitch
        """
        return self._switch

    @switch.setter
    def switch(self, switch):
        """
        Sets the switch of this LicenseGet.

        :param switch: The switch of this LicenseGet.
        :type: LicenseSwitch
        """

        self._switch = switch

    @property
    def user_email(self):
        """
        Gets the user_email of this LicenseGet.

        :return: The user_email of this LicenseGet.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this LicenseGet.

        :param user_email: The user_email of this LicenseGet.
        :type: str
        """

        self._user_email = user_email

    @property
    def periods(self):
        """
        Gets the periods of this LicenseGet.

        :return: The periods of this LicenseGet.
        :rtype: list[LicensePeriodGet]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """
        Sets the periods of this LicenseGet.

        :param periods: The periods of this LicenseGet.
        :type: list[LicensePeriodGet]
        """

        self._periods = periods

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LicenseGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
