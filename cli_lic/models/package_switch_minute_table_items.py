# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PackageSwitchMinuteTableItems(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minute_count': 'int',
        'on_premise': 'PackageSwitchMinute',
        'hosted_switch': 'PackageSwitchMinute'
    }

    attribute_map = {
        'minute_count': 'minute_count',
        'on_premise': 'on_premise',
        'hosted_switch': 'hosted_switch'
    }

    def __init__(self, minute_count=None, on_premise=None, hosted_switch=None):
        """
        PackageSwitchMinuteTableItems - a model defined in Swagger
        """

        self._minute_count = None
        self._on_premise = None
        self._hosted_switch = None

        if minute_count is not None:
          self.minute_count = minute_count
        if on_premise is not None:
          self.on_premise = on_premise
        if hosted_switch is not None:
          self.hosted_switch = hosted_switch

    @property
    def minute_count(self):
        """
        Gets the minute_count of this PackageSwitchMinuteTableItems.

        :return: The minute_count of this PackageSwitchMinuteTableItems.
        :rtype: int
        """
        return self._minute_count

    @minute_count.setter
    def minute_count(self, minute_count):
        """
        Sets the minute_count of this PackageSwitchMinuteTableItems.

        :param minute_count: The minute_count of this PackageSwitchMinuteTableItems.
        :type: int
        """

        self._minute_count = minute_count

    @property
    def on_premise(self):
        """
        Gets the on_premise of this PackageSwitchMinuteTableItems.

        :return: The on_premise of this PackageSwitchMinuteTableItems.
        :rtype: PackageSwitchMinute
        """
        return self._on_premise

    @on_premise.setter
    def on_premise(self, on_premise):
        """
        Sets the on_premise of this PackageSwitchMinuteTableItems.

        :param on_premise: The on_premise of this PackageSwitchMinuteTableItems.
        :type: PackageSwitchMinute
        """

        self._on_premise = on_premise

    @property
    def hosted_switch(self):
        """
        Gets the hosted_switch of this PackageSwitchMinuteTableItems.

        :return: The hosted_switch of this PackageSwitchMinuteTableItems.
        :rtype: PackageSwitchMinute
        """
        return self._hosted_switch

    @hosted_switch.setter
    def hosted_switch(self, hosted_switch):
        """
        Sets the hosted_switch of this PackageSwitchMinuteTableItems.

        :param hosted_switch: The hosted_switch of this PackageSwitchMinuteTableItems.
        :type: PackageSwitchMinute
        """

        self._hosted_switch = hosted_switch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PackageSwitchMinuteTableItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
