"""package_lrn package_switch

Revision ID: 79580b1c9691
Revises: 4b09277baffb
Create Date: 2018-10-29 21:08:14.763549

"""
from alembic import op
import sqlalchemy as sa
import api_lic.migration_types
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '79580b1c9691'
down_revision = '4b09277baffb'
branch_labels = None
depends_on = None


def upgrade():
    #connection = op.get_bind()
    #connection.execute('delete from users')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('package_lrn',
    sa.Column('package_lrn_uuid', sa.String(length=36), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('package_name', sa.String(length=64), nullable=True),
    sa.Column('cps', sa.Integer(), nullable=True),
    sa.Column('type', api_lic.migration_types.ChoiceType({}), nullable=True),
    sa.Column('lrn_ip', sa.String(length=16), nullable=False),
    sa.Column('lrn_port', sa.Integer(), nullable=True),
    sa.Column('dip_count', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('package_lrn_uuid'),
    sa.UniqueConstraint('package_name')
    )
    op.create_table('package_switch',
    sa.Column('package_switch_uuid', sa.String(length=36), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('package_name', sa.String(length=64), nullable=True),
    sa.Column('type', api_lic.migration_types.ChoiceType({}), nullable=True),
    sa.Column('switch_ip', sa.String(length=16), nullable=False),
    sa.Column('switch_port', sa.Integer(), nullable=True),
    sa.Column('minute_count', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('package_switch_uuid'),
    sa.UniqueConstraint('package_name')
    )

    op.drop_index('ix_license_lrn_license_uuid', table_name='license_lrn')
    op.drop_constraint('license_lrn_license_uuid_fkey', 'license_lrn', type_='foreignkey')
    op.drop_column('license_lrn', 'license_uuid')

    op.add_column('license_lrn', sa.Column('cost', api_lic.migration_types.Numeric(), server_default='0', nullable=False))
    op.add_column('license_lrn', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('license_lrn', sa.Column('license_lrn_uuid', sa.String(length=36), server_default=sa.text('uuid_generate_v4()'), nullable=False,primary_key=True))
    op.create_primary_key('license_lrn_pk', 'license_lrn', ['license_lrn_uuid'])
    op.add_column('license_lrn', sa.Column('ordered_amount', sa.Integer(), nullable=True))
    op.add_column('license_lrn', sa.Column('package_lrn_uuid', sa.String(length=36), nullable=True))
    op.add_column('license_lrn', sa.Column('plan_uuid', sa.String(length=36), nullable=True))
    op.add_column('license_lrn', sa.Column('start_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('license_lrn', sa.Column('user_uuid', sa.String(length=36), nullable=True))
    op.create_index(op.f('ix_license_lrn_package_lrn_uuid'), 'license_lrn', ['package_lrn_uuid'], unique=False)
    op.create_index(op.f('ix_license_lrn_plan_uuid'), 'license_lrn', ['plan_uuid'], unique=False)
    op.create_index(op.f('ix_license_lrn_user_uuid'), 'license_lrn', ['user_uuid'], unique=False)

    op.create_foreign_key(None, 'license_lrn', 'package_lrn', ['package_lrn_uuid'], ['package_lrn_uuid'], ondelete='CASCADE')
    op.create_foreign_key(None, 'license_lrn', 'user', ['user_uuid'], ['user_uuid'], ondelete='CASCADE')
    op.create_foreign_key(None, 'license_lrn', 'plan', ['plan_uuid'], ['plan_uuid'], ondelete='CASCADE')
    op.drop_column('license_lrn', 'cps')
    op.drop_column('license_lrn', 'type')

    op.drop_index('ix_license_switch_license_uuid', table_name='license_switch')
    op.drop_constraint('license_switch_license_uuid_fkey', 'license_switch', type_='foreignkey')
    op.drop_column('license_switch', 'license_uuid')
    op.add_column('license_switch', sa.Column('cost', api_lic.migration_types.Numeric(), server_default='0', nullable=False))
    op.add_column('license_switch', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('license_switch', sa.Column('license_switch_uuid', sa.String(length=36), server_default=sa.text('uuid_generate_v4()'), nullable=False,primary_key=True))
    op.create_primary_key('license_switch_pk','license_switch',['license_switch_uuid'])
    op.add_column('license_switch', sa.Column('ordered_amount', sa.Integer(), nullable=True))
    op.add_column('license_switch', sa.Column('package_switch_uuid', sa.String(length=36), nullable=True))
    op.add_column('license_switch', sa.Column('plan_uuid', sa.String(length=36), nullable=True))
    op.add_column('license_switch', sa.Column('start_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('license_switch', sa.Column('user_uuid', sa.String(length=36), nullable=True))
    op.create_index(op.f('ix_license_switch_package_switch_uuid'), 'license_switch', ['package_switch_uuid'], unique=False)
    op.create_index(op.f('ix_license_switch_plan_uuid'), 'license_switch', ['plan_uuid'], unique=False)
    op.create_index(op.f('ix_license_switch_user_uuid'), 'license_switch', ['user_uuid'], unique=False)

    op.create_foreign_key(None, 'license_switch', 'user', ['user_uuid'], ['user_uuid'], ondelete='CASCADE')
    op.create_foreign_key(None, 'license_switch', 'package_switch', ['package_switch_uuid'], ['package_switch_uuid'], ondelete='CASCADE')
    op.create_foreign_key(None, 'license_switch', 'plan', ['plan_uuid'], ['plan_uuid'], ondelete='CASCADE')
    op.drop_column('license_switch', 'ip')
    op.drop_column('license_switch', 'type')

    op.add_column('payment', sa.Column('license_lrn_uuid', sa.String(length=36), nullable=True))
    op.add_column('payment', sa.Column('license_switch_uuid', sa.String(length=36), nullable=True))
    op.create_index(op.f('ix_payment_license_lrn_uuid'), 'payment', ['license_lrn_uuid'], unique=False)
    op.create_index(op.f('ix_payment_license_switch_uuid'), 'payment', ['license_switch_uuid'], unique=False)
    op.drop_index('ix_payment_license_period_uuid', table_name='payment')
    op.drop_constraint('payment_license_period_uuid_fkey', 'payment', type_='foreignkey')
    op.create_foreign_key(None, 'payment', 'license_switch', ['license_switch_uuid'], ['license_switch_uuid'], ondelete='CASCADE')
    op.create_foreign_key(None, 'payment', 'license_lrn', ['license_lrn_uuid'], ['license_lrn_uuid'], ondelete='CASCADE')
    op.drop_column('payment', 'license_period_uuid')
    op.drop_table('license_period')
    op.drop_table('license')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('payment', sa.Column('license_period_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'payment', type_='foreignkey')
    op.drop_constraint(None, 'payment', type_='foreignkey')
    op.create_foreign_key('payment_license_period_uuid_fkey', 'payment', 'license_period', ['license_period_uuid'], ['license_period_uuid'], ondelete='CASCADE')
    op.create_index('ix_payment_license_period_uuid', 'payment', ['license_period_uuid'], unique=False)
    op.drop_index(op.f('ix_payment_license_switch_uuid'), table_name='payment')
    op.drop_index(op.f('ix_payment_license_lrn_uuid'), table_name='payment')
    op.drop_column('payment', 'license_switch_uuid')
    op.drop_column('payment', 'license_lrn_uuid')
    op.add_column('license_switch', sa.Column('license_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('license_switch', sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('license_switch', sa.Column('ip', sa.VARCHAR(length=16), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'license_switch', type_='foreignkey')
    op.drop_constraint(None, 'license_switch', type_='foreignkey')
    op.drop_constraint(None, 'license_switch', type_='foreignkey')
    op.create_foreign_key('license_switch_license_uuid_fkey', 'license_switch', 'license', ['license_uuid'], ['license_uuid'], ondelete='CASCADE')
    op.create_index('ix_license_switch_license_uuid', 'license_switch', ['license_uuid'], unique=False)
    op.drop_index(op.f('ix_license_switch_user_uuid'), table_name='license_switch')
    op.drop_index(op.f('ix_license_switch_plan_uuid'), table_name='license_switch')
    op.drop_index(op.f('ix_license_switch_package_switch_uuid'), table_name='license_switch')
    op.drop_column('license_switch', 'user_uuid')
    op.drop_column('license_switch', 'start_time')
    op.drop_column('license_switch', 'plan_uuid')
    op.drop_column('license_switch', 'package_switch_uuid')
    op.drop_column('license_switch', 'ordered_amount')
    op.drop_column('license_switch', 'license_switch_uuid')
    op.drop_column('license_switch', 'end_time')
    op.drop_column('license_switch', 'cost')
    op.add_column('license_lrn', sa.Column('license_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('license_lrn', sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('license_lrn', sa.Column('cps', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'license_lrn', type_='foreignkey')
    op.drop_constraint(None, 'license_lrn', type_='foreignkey')
    op.drop_constraint(None, 'license_lrn', type_='foreignkey')
    op.create_foreign_key('license_lrn_license_uuid_fkey', 'license_lrn', 'license', ['license_uuid'], ['license_uuid'], ondelete='CASCADE')
    op.create_index('ix_license_lrn_license_uuid', 'license_lrn', ['license_uuid'], unique=False)
    op.drop_index(op.f('ix_license_lrn_user_uuid'), table_name='license_lrn')
    op.drop_index(op.f('ix_license_lrn_plan_uuid'), table_name='license_lrn')
    op.drop_index(op.f('ix_license_lrn_package_lrn_uuid'), table_name='license_lrn')
    op.drop_column('license_lrn', 'user_uuid')
    op.drop_column('license_lrn', 'start_time')
    op.drop_column('license_lrn', 'plan_uuid')
    op.drop_column('license_lrn', 'package_lrn_uuid')
    op.drop_column('license_lrn', 'ordered_amount')
    op.drop_column('license_lrn', 'license_lrn_uuid')
    op.drop_column('license_lrn', 'end_time')
    op.drop_column('license_lrn', 'cost')
    op.create_table('license',
    sa.Column('license_uuid', sa.VARCHAR(length=36), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('plan_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan_uuid'], ['plan.plan_uuid'], name='license_plan_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.user_uuid'], name='license_user_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('license_uuid', name='license_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('license_period',
    sa.Column('license_period_uuid', sa.VARCHAR(length=36), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('license_uuid', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('cost', sa.NUMERIC(), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=False),
    sa.Column('ordered_amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['license_uuid'], ['license.license_uuid'], name='license_period_license_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('license_period_uuid', name='license_period_pkey')
    )
    op.drop_table('package_switch')
    op.drop_table('package_lrn')
    # ### end Alembic commands ###
