# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cli_lic
from cli_lic.rest import ApiException
from cli_lic.apis.auth_api import AuthApi
from api_lic.test.settings import *

class TestAuthApi(unittest.TestCase):
    """ AuthApi unit test stubs """

    def setUp(self):
        self.api = cli_lic.apis.auth_api.AuthApi()
        self.users=[]
        self.companies=[]

    def tearDown(self):
        auth()
        for uid in self.users:
            if uid != TEST_USER_UUID:
                self.api.user_user_uuid_delete(user_uuid=uid)
        for uuid in self.companies:
            try:
                cli_lic.AdminApi().company_company_uuid_delete(company_uuid=uuid)
            except:
                pass
        pass

    def test_auth_check_password_post(self):
        """
        Test case for auth_check_password_post

        
        """
        auth()
        ret = self.api.auth_check_password_post(body=dict(password='yoo5Iche'))
        pass

    def test_auth_check_token_post(self):
        """
        Test case for auth_check_token_post

        
        """
        pass

    def test_auth_post(self):
        """
        Test case for auth_post

        
        """
        auth_user('65dcf2de-b87d-44a0-82a9-962b141387d9')
        auth_user('3c372a23-d09d-40d6-8123-e37acf98e1cf')
        auth()
        user = dict(bla_contact(is_active=True))

        ret = self.api.user_post(body=user)
        self.users.append(ret.object_uuid)
        ret=self.api.auth_post(body=dict(email=user['email'],password=user['passwd']))
        assert (ret.success)
        print(ret)
        pass

    def test_auth_reset_email_post(self):
        """
        Test case for auth_reset_email_post


        """
        ret = self.api.auth_reset_email_post(body=dict(email='_novvv@mail.ru'))
        assert (ret.success)
        pass

    def test_auth_reset_password_token_post(self):
        """
        Test case for auth_reset_password_token_post


        """
        auth_user()
        ret = cli_lic.UserApi().home_get()
        user = ret.payload
        token=cli_lic.configuration.api_key['X-Auth-Token']
        logoff()
        pwd='string'#bla(10)
        ret=self.api.auth_reset_password_token_post(token=token,body=dict(passwd=pwd))
        assert(ret.success)
        ret=self.api.auth_post(body=dict(email=user.email,password=pwd))
        assert (ret.success)
        print(ret)
        pass

    def test_registration_confirm_token_post(self):
        """
        Test case for registration_confirm_token_post


        """
        auth_user()
        ret = cli_lic.UserApi().home_get()
        user = ret.payload
        token = cli_lic.configuration.api_key['X-Auth-Token']
        logoff()
        self.api.registration_confirm_token_post(token=token)
        pass

    def test_registration_post(self):
        """
        Test case for registration_post


        """

        def bla_register(**kwargs):
            data = dict(email=bla_mail(),passwd=bla(10))
            for k, v in kwargs.items():
                data[k] = v
            return data
        user = bla_register()
        #auth()
        ret = self.api.registration_post(body=user)
        print(ret)
        auth_user(ret.object_uuid)
        assert (ret.success)
        ret=self.api.registration_confirm_token_post(token=cli_lic.configuration.api_key['X-Auth-Token'])
        assert (ret.success)
        pass

    def test_user_by_email_email_delete(self):
        """
        Test case for user_by_email_email_delete


        """
        auth()
        email = bla_mail()
        user=dict(passwd=bla(8),email=email,first_name=bla(6),last_name=bla(8))
        ret=self.api.user_post(body=user)
        ret=self.api.user_by_email_email_delete(email=email)
        assert(ret.success)

        pass

    def test_user_by_email_email_get(self):
        """
        Test case for user_by_email_email_get


        """
        auth()
        email = bla_mail()
        user = dict(passwd=bla(8), email=email, first_name=bla(6), last_name=bla(8))
        ret = self.api.user_post(body=user)
        ret = self.api.user_by_email_email_get(email=email)
        assert (ret.success)
        ret = self.api.user_by_email_email_delete(email=email)

        pass

    def test_user_by_email_email_patch(self):
        """
        Test case for user_by_email_email_patch


        """
        auth()
        email = bla_mail()
        user = dict(passwd=bla(8), email=email, first_name=bla(6), last_name=bla(8))
        ret = self.api.user_post(body=user)
        ret = self.api.user_by_email_email_patch(email=email,body=dict(is_active=False))
        assert (ret.success)
        assert(ret.payload.is_active==False)
        ret = self.api.user_by_email_email_delete(email=email)
        pass

    def test_user_list_get(self):
        """
        Test case for user_list_get


        """
        auth()
        ret = self.api.user_list_get(role_name='user')
        print(ret)
        assert (ret.success)
        pass

    def test_user_post(self):
        """
        Test case for user_post


        """
        auth()
        user=dict(passwd=bla(8),email=bla_mail(),first_name=bla(6),last_name=bla(8))

        ret=self.api.user_post(body=user)
        print(json.dumps(user))
        print(ret)
        assert(ret.success)

        self.users.append(ret.object_uuid)
        pass



    def test_user_user_uuid_delete(self):
        """
        Test case for user_user_uuid_delete

        
        """
        pass

    def test_user_user_uuid_get(self):
        """
        Test case for user_user_uuid_get

        
        """
        #auth_user()
        auth()
        ret = self.api.user_user_uuid_get(user_uuid=TEST_USER_UUID)
        print(ret)
        pass

    def test_user_user_uuid_patch(self):
        """
        Test case for user_user_uuid_patch

        
        """
        
        auth()
        mail = '_novvv@mail.ru'
        ret = self.api.user_user_uuid_patch(user_uuid=TEST_USER_UUID,body=dict(email=mail,is_admin=False,is_active=True))

        assert (ret.success and ret.payload.email == mail)
        if ret.payload.role_name=='wrong_user':
        
            ret = self.api.user_user_uuid_patch(user_uuid=TEST_USER_UUID, body=dict(passwd=dig(4)))

        print(ret)
        pass


if __name__ == '__main__':
    unittest.main()
