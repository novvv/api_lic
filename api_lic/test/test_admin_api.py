# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cli_lic
from cli_lic.rest import ApiException
from cli_lic.apis.admin_api import AdminApi
from api_lic.test.settings import *

class TestAdminApi(unittest.TestCase):
    """ AdminApi unit test stubs """

    def setUp(self):
        self.api = cli_lic.apis.admin_api.AdminApi()

    def tearDown(self):
        pass

    def test_notification_notification_uuid_delete(self):
        """
        Test case for notification_notification_uuid_delete

        
        """
        auth()
        data = dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid = ret.object_uuid
        ret = self.api.notification_notification_uuid_delete(notification_uuid=notification_uuid)
        assert (ret.success)
        pass

    def test_notification_notification_uuid_get(self):
        """
        Test case for notification_notification_uuid_get

        
        """
        auth()
        data = dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid = ret.object_uuid
        ret = self.api.notification_notification_uuid_get(notification_uuid=notification_uuid)
        assert (ret.success,ret.payload.content==data['content'])
        pass

    def test_notification_notification_uuid_patch(self):
        """
        Test case for notification_notification_uuid_patch

        
        """
        auth()
        data=dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid =ret.object_uuid
        ret = self.api.notification_notification_uuid_patch(notification_uuid=notification_uuid,body=data)
        assert (ret.success)
        pass

    def test_notification_post(self):
        """
        Test case for notification_post

        
        """
        auth()
        ret=self.api.notification_post(body=dict(user_uuid=TEST_USER_UUID,subject=bla(10),content=bla_bla(3)))
        assert(ret.success)
        pass

    def test_rate_post(self):
        """
        Test case for rate_post

        
        """
        auth()
        for t in ( 'switch pay per port','switch pay per minute', 'LRN pay per CPS', 'LRN pay per DIP'):
            data=dict(type=t,rate=random.random()*3)
            ret=self.api.rate_post(body=data)
            assert (ret.success)
        pass

    def test_rate_rate_uuid_delete(self):
        """
        Test case for rate_rate_uuid_delete

        
        """
        auth()
        data = dict(type='switch pay per port', rate=random.random() * 3)
        ret = self.api.rate_post(body=data)
        ret= self.api.rate_rate_uuid_delete(rate_uuid=ret.object_uuid)
        assert (ret.success)

        pass

    def test_rate_rate_uuid_get(self):
        """
        Test case for rate_rate_uuid_get

        
        """
        auth()
        data = dict(type='switch pay per port', rate=random.random() * 3)
        ret = self.api.rate_post(body=data)
        rate_uuid=ret.object_uuid
        ret = self.api.rate_rate_uuid_get(rate_uuid=rate_uuid)
        assert (ret.success)
        ret = self.api.rate_rate_uuid_delete(rate_uuid=rate_uuid)

        pass

    def test_rate_rate_uuid_patch(self):
        """
        Test case for rate_rate_uuid_patch

        
        """
        auth()
        data = dict(type='switch pay per port', rate=random.random() * 3)
        ret = self.api.rate_post(body=data)
        rate_uuid = ret.object_uuid
        ret = self.api.rate_rate_uuid_patch(rate_uuid=rate_uuid,body=data)
        assert (ret.success)
        ret = self.api.rate_rate_uuid_delete(rate_uuid=rate_uuid)

        pass


if __name__ == '__main__':
    unittest.main()
