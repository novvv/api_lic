# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cli_lic
from cli_lic.rest import ApiException
from cli_lic.apis.admin_api import AdminApi
from api_lic.test.settings import *

class TestAdminApi(unittest.TestCase):
    """ AdminApi unit test stubs """

    def setUp(self):
        self.api = cli_lic.apis.admin_api.AdminApi()
        self.package_lrn = []
        self.package_switch = []
        self.switch = []

    def tearDown(self):
        def clear(name):
            for uuid in getattr(self,name):
                try:
                    m=getattr(self.api,'{}_{}_uuid_delete'.format(name,name))
                    args={'{}_uuid'.format(name):uuid}
                    m(**args)
                except Exception as e:
                    print('tear down warning deleting {} {}:{}'.format(name,uuid,e))
                    pass
        auth()
        for name in ('package_lrn','package_switch','switch'):
            clear(name)
        pass


    def test_notification_notification_uuid_delete(self):
        """
        Test case for notification_notification_uuid_delete

        
        """
        auth()
        data = dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid = ret.object_uuid
        ret = self.api.notification_notification_uuid_delete(notification_uuid=notification_uuid)
        assert (ret.success)
        pass

    def test_notification_notification_uuid_get(self):
        """
        Test case for notification_notification_uuid_get

        
        """
        auth()
        data = dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid = ret.object_uuid
        ret = self.api.notification_notification_uuid_get(notification_uuid=notification_uuid)
        assert (ret.success,ret.payload.content==data['content'])
        pass

    def test_notification_notification_uuid_patch(self):
        """
        Test case for notification_notification_uuid_patch

        
        """
        auth()
        data=dict(user_uuid=TEST_USER_UUID, subject=bla(10), content=bla_bla(3))
        ret = self.api.notification_post(body=data)
        notification_uuid =ret.object_uuid
        ret = self.api.notification_notification_uuid_patch(notification_uuid=notification_uuid,body=data)
        assert (ret.success)
        pass

    def test_notification_post(self):
        """
        Test case for notification_post

        
        """
        auth()
        ret=self.api.notification_post(body=dict(user_uuid=TEST_USER_UUID,subject=bla(10),content=bla_bla(3)))
        assert(ret.success)
        pass

    def test_package_lrn_package_lrn_uuid_delete(self):
        """
        Test case for package_lrn_package_lrn_uuid_delete


        """
        if not self.package_lrn:
            self.test_package_lrn_post()
        ret=self.api.package_lrn_package_lrn_uuid_delete(package_lrn_uuid=self.package_lrn[0])
        assert(ret.success)
        del self.package_lrn[0]
        pass

    def test_package_lrn_package_lrn_uuid_get(self):
        """
        Test case for package_lrn_package_lrn_uuid_get


        """
        if not self.package_lrn:
            self.test_package_lrn_post()
        ret=self.api.package_lrn_package_lrn_uuid_get(package_lrn_uuid=self.package_lrn[0])
        assert(ret.success)
        print(ret)
        pass

    def test_package_lrn_package_lrn_uuid_patch(self):
        """
        Test case for package_lrn_package_lrn_uuid_patch


        """
        if not self.package_lrn:
            self.test_package_lrn_post()
        data = dict(package_name='lrn_{}'.format(dig(10)), cps=random.randint(10, 1000),
                    lrn_port=random.randint(1000, 65535),
                    type=random.choice(['LRN pay per CPS', 'LRN pay per DIP']),
                    dip_count=random.randint(10, 1000), amount=random.randint(10, 1000), enabled=True)
        ret=self.api.package_lrn_package_lrn_uuid_patch(package_lrn_uuid=self.package_lrn[0],body=data)
        assert(ret.success)
        print(ret)
        pass

    def test_package_lrn_package_lrn_uuid_user_uuid_delete(self):
        """
        Test case for package_lrn_package_lrn_uuid_user_uuid_delete


        """
        auth_user()
        package_lrn_uuid = rand_package_lrn()[0]
        user_uuid = TEST_USER_UUID
        oldret = cli_lic.UserApi().license_lrn_list_get(package_lrn_uuid=package_lrn_uuid)
        if not oldret.payload.items:
            data = dict(package_lrn_uuid = package_lrn_uuid, ip=ip())
            ret = cli_lic.UserApi().license_lrn_post(body=data)
            assert (ret.success)
        ret = self.api.package_lrn_package_lrn_uuid_user_uuid_delete(package_lrn_uuid=package_lrn_uuid,user_uuid=user_uuid)
        assert (ret.success)
        if oldret.payload.items:
            data = dict(package_lrn_uuid = package_lrn_uuid, ip=oldret.payload.items[0].ip)
            ret = cli_lic.UserApi().license_lrn_post(body=data)
            assert (ret.success)
        pass

    def test_package_lrn_post(self):
        """
        Test case for package_lrn_post


        """
        auth()
        data=dict(lrn_ip=ip(),package_name='lrn_{}'.format(dig(10)),cps=random.randint(10,1000),lrn_port=random.randint(1000,65535),
                  type=random.choice(['LRN pay per CPS', 'LRN pay per DIP']),
                  dip_count=random.randint(10,1000),amount=random.randint(10,1000),enabled=True)
        ret=self.api.package_lrn_post(body=data)
        assert(ret.success)
        self.package_lrn.append(ret.object_uuid)

        pass

    def test_package_switch_package_switch_uuid_delete(self):
        """
        Test case for package_switch_package_switch_uuid_delete


        """
        if not self.package_switch:
            self.test_package_switch_post()
        ret=self.api.package_switch_package_switch_uuid_delete(package_switch_uuid=self.package_switch[0])
        assert(ret.success)
        del self.package_switch[0]
        print(ret)
        pass

    def test_package_switch_package_switch_uuid_get(self):
        """
        Test case for package_switch_package_switch_uuid_get


        """
        if not self.package_switch:
            self.test_package_switch_post()
        ret=self.api.package_switch_package_switch_uuid_get(package_switch_uuid=self.package_switch[0])
        assert(ret.success)
        print(ret)
        pass

    def test_package_switch_package_switch_uuid_patch(self):
        """
        Test case for package_switch_package_switch_uuid_patch


        """
        if not self.package_switch:
            self.test_package_switch_post()
        data = dict(switch_ip=rand_switch()[0], package_name='switch_{}'.format(dig(10)), cps=random.randint(10, 1000),
                    switch_port=random.randint(1000, 65535),
                    type=random.choice(['switch pay per port', 'switch pay per minute']),
                    minute_count=random.randint(10, 1000), amount=random.randint(10, 1000), enabled=True)
        ret=self.api.package_switch_package_switch_uuid_patch(package_switch_uuid=self.package_switch[0],body=data)
        assert(ret.success)
        print(ret)
        pass

    def test_package_switch_package_switch_uuid_user_uuid_delete(self):
        """
        Test case for package_switch_package_switch_uuid_user_uuid_delete


        """
        auth_user()
        package_switch_uuid = rand_package_switch()[0]
        user_uuid = TEST_USER_UUID
        ret= cli_lic.UserApi().license_switch_list_get(package_switch_uuid=package_switch_uuid)
        if not ret.payload.items:
            data = dict(package_switch_uuid = package_switch_uuid, ip=ip())
            ret = cli_lic.UserApi().license_switch_post(body=data)
            assert (ret.success)
        print(ret)
        ret = self.api.package_switch_package_switch_uuid_user_uuid_delete(package_switch_uuid=package_switch_uuid,user_uuid=user_uuid)
        assert (ret.success)
        pass

    def test_package_switch_post(self):
        """
        Test case for package_switch_post


        """
        auth()
        # if not rand_switch():
        #     self.test_switch_post()
        data = dict(switch_uuid=rand_switch()[0], package_name='switch_{}'.format(dig(10)), cps=random.randint(10, 1000),
                    switch_port=random.randint(1000, 65535),
                    type=random.choice(['switch pay per port', 'switch pay per minute']),
                    minute_count=random.randint(10, 1000), amount=random.randint(10, 1000), enabled=True,
                    expire_date=str(datetime.now(UTC)+timedelta(days=30)))
        ret = self.api.package_switch_post(body=data)
        assert (ret.success)
        self.package_switch.append(ret.object_uuid)
        return

        f = open('api_lic/test/data/switch_port_pricing.csv','rt')
        r=csv.DictReader(f,fieldnames=['type','port','price'])
        for i in r:
            print(i)
            ret=cli_lic.PublicApi().package_switch_list_get(switch_port=int(i['port']),type='switch pay per port',sub_type=i['type'])
            if ret.payload.items:
                print('---')
                continue
            data = dict(package_name='switch_port_{port}_{type}'.format_map(i),
                        switch_port=int(i['port']),
                        type='switch pay per port',
                        sub_type=i['type'],
                        amount=float(i['price']),
                        enabled=True)
            ret = self.api.package_switch_post(body=data)
        f.close()

        f = open('api_lic/test/data/switch_minute_pricing.csv', 'rt')
        r = csv.DictReader(f, fieldnames=['type', 'minute', 'rate','price'])
        for i in r:
            print(i)
            ret = cli_lic.PublicApi().package_switch_list_get(minute_count=int(i['minute']), type='switch pay per minute',
                                                              sub_type=i['type'])
            if ret.payload.items:
                print('---')
                continue
            data = dict(package_name='switch_minute_{minute}_{type}'.format_map(i),
                        minute_count=int(i['minute']),
                        type='switch pay per minute',
                        sub_type=i['type'],
                        amount=float(i['price']),
                        enabled=True)
            ret = self.api.package_switch_post(body=data)
        f.close()
        pass

    def test_plan_plan_uuid_delete(self):
        """
        Test case for plan_plan_uuid_delete


        """
        pass

    def test_plan_plan_uuid_get(self):
        """
        Test case for plan_plan_uuid_get


        """
        pass

    def test_plan_plan_uuid_patch(self):
        """
        Test case for plan_plan_uuid_patch


        """
        pass

    def test_plan_post(self):
        """
        Test case for plan_post


        """
        pass


if __name__ == '__main__':
    unittest.main()
