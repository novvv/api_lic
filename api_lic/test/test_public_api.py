# coding: utf-8

"""
    LICENSE API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import cli_lic
from cli_lic.rest import ApiException
from cli_lic.apis.public_api import PublicApi
from .settings import *



class TestPublicApi(unittest.TestCase):
    """ PublicApi unit test stubs """

    def setUp(self):
        self.api = cli_lic.apis.public_api.PublicApi()

    def tearDown(self):
        pass


    def test_file_download_download_token_get(self):
        """
        Test case for file_download_download_token_get


        """
        pass

    def test_file_download_link_belongs_to_uuid_uuid_get(self):
        """
        Test case for file_download_link_belongs_to_uuid_uuid_get


        """
        pass

    def test_file_file_uuid_get(self):
        """
        Test case for file_file_uuid_get


        """
        pass

    def test_file_list_get(self):
        """
        Test case for file_list_get


        """
        pass

    def test_file_list_tmp_get(self):
        """
        Test case for file_list_tmp_get


        """
        pass

    def test_file_post(self):
        """
        Test case for file_post


        """
        auth()
        ret = self.api.file_post(file='api_lic/test/data/1.png',belongs_to='user.logo')
        assert (ret.success)
        logo_file_uuid=ret.object_uuid
        cli_lic.AuthApi().user_user_uuid_patch(user_uuid=TEST_USER_UUID,body=dict(logo_file_uuid=logo_file_uuid))
        assert (ret.success)
        ret=self.api.file_download_link_belongs_to_uuid_uuid_get(belongs_to_uuid=TEST_USER_UUID,uuid=logo_file_uuid)
        assert (ret.download_link)
        url = ret.download_link
        r = self.api.api_client.rest_client.pool_manager.request('GET', url)
        import tempfile, os
        temp = tempfile.NamedTemporaryFile(delete=False)
        temp.write(r.data)
        temp.close()
        cmd = 'gwenview {} && rm {} &'.format(temp.name,temp.name)
        print(cmd)
        os.system(cmd)


        #os.unlink(temp.name)
        pass

    def test_image_file_name_get(self):
        """
        Test case for image_file_name_get


        """
        auth()
        ret=self.api.image_post(file='api_lic/test/data/1.png')
        assert(ret.success)
        url=cli_lic.configuration.host+'/image/1.png'
        #ret = self.api.file_file_name_get(file_name='logo.png')
        r = self.api.api_client.rest_client.pool_manager.request('GET', url)
        import tempfile,os
        temp = tempfile.NamedTemporaryFile(delete=False)
        temp.write(r.data)
        temp.close()
        #cmd = 'gwenview {}'.format(temp.name)
        cmd = 'gwenview {} && rm {} &'.format(temp.name, temp.name)
        print(cmd)
        os.system(cmd)
        #os.unlink(temp.name)
        pass

    def test_image_post(self):
        """
        Test case for image_post


        """
        pass

    def test_package_lrn_list_get(self):
        """
        Test case for package_lrn_list_get


        """
        auth_user()
        ret = self.api.package_lrn_list_get()
        assert(ret.success)
        print(ret)
        pass

    def test_package_switch_list_get(self):
        """
        Test case for package_switch_list_get


        """
        auth_user()
        ret = self.api.package_lrn_list_get()
        assert (ret.success)
        print(ret)
        pass

    def test_package_switch_minute_table_get(self):
        """
        Test case for package_switch_minute_table_get


        """
        pass

    def test_package_switch_port_table_get(self):
        """
        Test case for package_switch_port_table_get


        """
        pass

    def test_switch_list_get(self):
        """
        Test case for switch_list_get


        """
        auth()
        ret = self.api.switch_list_get()
        assert (ret.success)
        print(ret)
        pass


if __name__ == '__main__':
    unittest.main()
